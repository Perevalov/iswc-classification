{
    "http://dbpedia.org/resource/Mercury_(programming_language)": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Algebraic_Logic_Functional_programming_language": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Escher_(programming_language)": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Oz_(programming_language)": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Racket_(programming_language)": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Ciao_(programming_language)": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/A++": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Stephen_Muggleton": {
        "http://dbpedia.org/ontology/field": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Aldor": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/G\u00f6del_(programming_language)": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Absys": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Prolog": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Alma-0": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/SWI-Prolog": {
        "http://dbpedia.org/ontology/genre": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Logtalk": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ],
        "http://dbpedia.org/ontology/influencedBy": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Fril": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Robert_Kowalski": {
        "http://dbpedia.org/ontology/knownFor": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Veronica_Dahl": {
        "http://dbpedia.org/ontology/knownFor": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/CLACL": {
        "http://dbpedia.org/property/paradigm": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://en.wikipedia.org/wiki/Logic_programming": {
        "http://xmlns.com/foaf/0.1/primaryTopic": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/SICStus_Prolog": {
        "http://dbpedia.org/ontology/genre": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Johann_Makowsky": {
        "http://dbpedia.org/ontology/knownFor": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Logic_programming": {
        "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/ontology/ProgrammingLanguage"
            },
            {
                "type": "uri",
                "value": "http://www.w3.org/2002/07/owl#Thing"
            }
        ],
        "http://www.w3.org/2000/01/rdf-schema#label": [
            {
                "type": "literal",
                "value": "Logische Programmierung",
                "lang": "de"
            },
            {
                "type": "literal",
                "value": "Programaci\u00f3n l\u00f3gica",
                "lang": "es"
            },
            {
                "type": "literal",
                "value": "Programa\u00e7\u00e3o l\u00f3gica",
                "lang": "pt"
            },
            {
                "type": "literal",
                "value": "\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0",
                "lang": "ja"
            },
            {
                "type": "literal",
                "value": "\u0628\u0631\u0645\u062c\u0629 \u0645\u0646\u0637\u0642\u064a\u0629",
                "lang": "ar"
            },
            {
                "type": "literal",
                "value": "\u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435",
                "lang": "ru"
            },
            {
                "type": "literal",
                "value": "Logisch programmeren",
                "lang": "nl"
            },
            {
                "type": "literal",
                "value": "\u908f\u8f2f\u7de8\u7a0b",
                "lang": "zh"
            },
            {
                "type": "literal",
                "value": "Logic programming",
                "lang": "en"
            },
            {
                "type": "literal",
                "value": "Programmation logique",
                "lang": "fr"
            },
            {
                "type": "literal",
                "value": "Programowanie logiczne",
                "lang": "pl"
            },
            {
                "type": "literal",
                "value": "Programmazione logica",
                "lang": "it"
            }
        ],
        "http://www.w3.org/2000/01/rdf-schema#comment": [
            {
                "type": "literal",
                "value": "Logic programming is a programming paradigm based on formal logic. A program written in a logic programming language is a set of sentences in logical form, expressing facts and rules about some problem domain. Major logic programming language families include Prolog, Answer set programming (ASP) and Datalog. In all of these languages, rules are written in the form of clauses: H :- B1, \u2026, Bn. and are read declaratively as logical implications: H if B1 and \u2026 and Bn. H. to solve H, solve B1, and ... and solve Bn. Consider, for example, the following clause: fallible(X) :- human(X). human(socrates).",
                "lang": "en"
            },
            {
                "type": "literal",
                "value": "La programmation logique est une forme de programmation qui d\u00e9finit les applications \u00e0 l'aide d'un ensemble de faits \u00e9l\u00e9mentaires les concernant et de r\u00e8gles de logique leur associant des cons\u00e9quences plus ou moins directes. Ces faits et ces r\u00e8gles sont exploit\u00e9s par un d\u00e9monstrateur de th\u00e9or\u00e8me ou moteur d'inf\u00e9rence, en r\u00e9action \u00e0 une question ou requ\u00eate.",
                "lang": "fr"
            },
            {
                "type": "literal",
                "value": "Programa\u00e7\u00e3o l\u00f3gica \u00e9 um paradigma de programa\u00e7\u00e3o que faz uso da l\u00f3gica matem\u00e1tica. John McCarthy [1958] foi o primeiro a publicar uma proposta de uso da l\u00f3gica matem\u00e1tica para programa\u00e7\u00e3o. A primeira linguagem de programa\u00e7\u00e3o l\u00f3gica foi a Planner, a qual permitia a invoca\u00e7\u00e3o orientada a padr\u00f5es de planos procedimentais de asser\u00e7\u00f5es e de objetivos. Com a necessidade de adapta\u00e7\u00e3o aos sistemas de mem\u00f3ria muito limitada, que eram dispon\u00edveis quando ela foi desenvolvida. A linguagem Planner usava estruturas de controle de backtracking, de tal forma que apenas um \u00fanico caminho computacional tinha que ser armazenado por vez. Em seguida, o Prolog foi desenvolvido como uma simplifica\u00e7\u00e3o do Planner que permitia a invoca\u00e7\u00e3o orientada a padr\u00f5es apenas a partir de objetivos (tamb\u00e9m baseado em backtracki",
                "lang": "pt"
            },
            {
                "type": "literal",
                "value": "\u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u0645\u0646\u0637\u0642\u064a\u0629 Logic programming \u0647\u064a \u0628\u0645\u0641\u0647\u0648\u0645\u0647\u0627 \u0627\u0644\u0639\u0627\u0645 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u0631\u064a\u0627\u0636\u064a \u0645\u0646 \u0627\u062c\u0644 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062d\u0627\u0633\u0628. \u064a\u0633\u062a\u0639\u0645\u0644 \u0627\u0644\u0645\u0646\u0637\u0642 \u0644\u063a\u0629 \u062a\u0635\u0631\u064a\u062d\u064a\u0629 \u0644\u0644\u062a\u0639\u0628\u064a\u0631 \u0639\u0646 \u0627\u0644\u0645\u0634\u0643\u0644\u0629. \u062e\u0644\u0627\u0641 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0644\u063a\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0642\u0644\u064a\u062f\u064a\u0629 \u0641\u0625\u0646 \u0627\u0644\u0645\u0628\u0631\u0645\u062c \u0641\u064a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u0645\u0646\u0637\u0642\u064a\u0629 \u0644\u0627 \u064a\u0642\u0648\u0645 \u0628\u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0648\u0627\u0646\u0645 \u064a\u0642\u0639 \u0639\u0644\u0649 \u0639\u0627\u062a\u0642\u0647 \u0645\u0633\u0624\u0648\u0644\u064a\u0629 \u062c\u0632\u0626\u064a\u0629 \u0641\u064a \u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0648\u0647\u064a \u0628\u062a\u0645\u062b\u0644 \u0627\u0644\u0642\u0636\u0627\u064a\u0627 \u0648\u0627\u0644\u0645\u0639\u0627\u0631\u0641 \u0628\u0635\u0641\u0629 \u0645\u0646\u0637\u0642\u064a\u0629 logical form. \u0648\u064a\u0642\u0639 \u0627\u0644\u062c\u0632\u0621 \u0627\u0644\u0622\u062e\u0631 \u0644\u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0639\u0644\u0649 \u0645\u0627 \u064a\u062f\u0639\u0649 \u0645\u0628\u0631\u0647\u0646 \u0627\u0644\u0642\u0636\u0627\u064a\u0627 theorem-prover \u0623\u0648 \u0645\u0648\u0644\u062f \u0627\u0644\u0646\u0645\u0627\u0630\u062c model-generator \u0627\u0644\u0630\u064a \u064a\u0642\u0648\u0645 \u0628\u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0628\u0634\u0643\u0644 \u0641\u0639\u0627\u0644",
                "lang": "ar"
            },
            {
                "type": "literal",
                "value": "La programaci\u00f3n l\u00f3gica es un tipo de paradigmas de programaci\u00f3n dentro del paradigma de programaci\u00f3n declarativa. El resto de los subparadigmas de programaci\u00f3n dentro de la programaci\u00f3n declarativa son: programaci\u00f3n funcional, programaci\u00f3n con restricciones, programas DSL (de dominio espec\u00edfico) e h\u00edbridos. La programaci\u00f3n funcional se basa en el concepto de funci\u00f3n (que no es m\u00e1s que una evoluci\u00f3n de los predicados), de corte m\u00e1s matem\u00e1tico. La programaci\u00f3n l\u00f3gica gira en torno al concepto de predicado, o relaci\u00f3n entre elementos.",
                "lang": "es"
            },
            {
                "type": "literal",
                "value": "Logisch programmeren is een vorm van programmeren die valt onder het declaratieve paradigma. Een veelgebruikte logische programmeertaal is Prolog. Ook SQL is een declaratieve taal.Logische talen vinden vooral toepassing in de computationele taalkunde en de kunstmatige intelligentie. Inductief logisch programmeren is een andere vorm van logisch programmeren. \n*  Katten hebben een vacht \n*  Een vacht bestaat uit haren De interpreter moet in dit geval antwoord kunnen geven op de vraag \"Hebben katten haren?\". Een voorbeeld van een functionele en logische programmeertaal is Curry.",
                "lang": "nl"
            },
            {
                "type": "literal",
                "value": "\u041b\u043e\u0433\u0438\u0301\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0301\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2014 \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0435 \u0442\u0435\u043e\u0440\u0435\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u0434\u0435\u043b \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438, \u0438\u0437\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0432 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b \u0432\u044b\u0432\u043e\u0434\u0430. \u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u0442\u0435\u043e\u0440\u0438\u0438 \u0438 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 \u0440\u0435\u0437\u043e\u043b\u044e\u0446\u0438\u0439. \u0421\u0430\u043c\u044b\u043c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f Prolog.",
                "lang": "ru"
            },
            {
                "type": "literal",
                "value": "\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08Logic Programming\uff09\u3068\u306f\u3001\u5e83\u3044\u610f\u5473\u3067\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306e\u6570\u7406\u8ad6\u7406\u5b66\u306e\u4f7f\u7528\u3067\u3042\u308b\u3002\u3053\u306e\u89b3\u70b9\u3067\u306e\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u3001\u30b8\u30e7\u30f3\u30fb\u30de\u30c3\u30ab\u30fc\u30b7\u30fc[1958]\u306eadvice taker\u306e\u63d0\u6848\u306b\u307e\u3067\u3055\u304b\u306e\u307c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3088\u308a\u4e00\u822c\u7684\u306b\u53d7\u3051\u5165\u3089\u308c\u3066\u3044\u308b\u72ed\u3044\u610f\u5473\u3067\u306e\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u3001\u8ff0\u8a9e\u8ad6\u7406\u5f0f\u3092\u975e\u6c7a\u5b9a\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u307f\u306a\u3059\u3082\u306e\u3067\u3001\u8ff0\u8a9e\u8ad6\u7406\u5f0f\u306f\u5ba3\u8a00\u7684\u3067\u3042\u308b\u3068\u540c\u6642\u306b\u624b\u7d9a\u304d\u7684\u306b\u3082\u89e3\u91c8\u3055\u308c\u308b\u3002",
                "lang": "ja"
            },
            {
                "type": "literal",
                "value": "\u908f\u8f2f\u7de8\u7a0b\uff08\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1\uff09\u662f\u7a2e\u7de8\u7a0b\u5178\u7bc4\uff0c\u5b83\u8a2d\u5b9a\u7b54\u6848\u9808\u7b26\u5408\u7684\u898f\u5247\u4f86\u89e3\u6c7a\u554f\u984c\uff0c\u800c\u975e\u8a2d\u5b9a\u6b65\u9a5f\u4f86\u89e3\u6c7a\u554f\u984c\u3002\u904e\u7a0b\u662f \u4e8b\u5be6+\u898f\u5247=\u7d50\u679c\u3002 \u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u770bInductive logic programming\u3002 \u908f\u8f2f\u7de8\u7a0b\u7684\u8981\u9ede\u662f\u5c07\u6b63\u898f\u7684\u908f\u8f2f\u98a8\u683c\u5e36\u5165\u96fb\u8166\u7a0b\u5f0f\u8a2d\u8a08\u4e4b\u4e2d\u3002\u6578\u5b78\u5bb6\u548c\u54f2\u5b78\u5bb6\u767c\u73fe\u908f\u8f2f\u662f\u6709\u6548\u7684\u7406\u8ad6\u5206\u6790\u5de5\u5177\u3002\u5f88\u591a\u554f\u984c\u53ef\u4ee5\u81ea\u7136\u5730\u8868\u793a\u6210\u4e00\u500b\u7406\u8ad6\u3002\u8aaa\u9700\u8981\u89e3\u7b54\u4e00\u500b\u554f\u984c\uff0c\u901a\u5e38\u8207\u89e3\u7b54\u4e00\u500b\u65b0\u7684\u5047\u8a2d\u662f\u5426\u8ddf\u73fe\u5728\u7684\u7406\u8ad6\u7121\u885d\u7a81\u7b49\u50f9\u3002\u908f\u8f2f\u63d0\u4f9b\u4e86\u4e00\u500b\u8b49\u660e\u554f\u984c\u662f\u771f\u9084\u662f\u5047\u7684\u65b9\u6cd5\u3002\u5efa\u7acb\u8b49\u660e\u7684\u65b9\u6cd5\u662f\u4eba\u6240\u7686\u77e5\u7684\uff0c\u6545\u908f\u8f2f\u662f\u89e3\u7b54\u554f\u984c\u7684\u53ef\u9760\u65b9\u6cd5\u3002\u908f\u8f2f\u7de8\u7a0b\u7cfb\u7d71\u5247\u81ea\u52d5\u5316\u4e86\u9019\u500b\u7a0b\u5e8f\u3002\u4eba\u5de5\u667a\u80fd\u5728\u908f\u8f2f\u7de8\u7a0b\u7684\u767c\u5c55\u4e2d\u767c\u63ee\u4e86\u91cd\u8981\u7684\u5f71\u97ff\u3002 \u7334\u5b50\u548c\u9999\u8549\u554f\u984c\u662f\u908f\u8f2f\u7de8\u7a0b\u793e\u7fa4\u7684\u8457\u540d\u554f\u984c\u3002\u96fb\u8166\u9808\u81ea\u884c\u627e\u51fa\u4ee4\u7334\u5b50\u63a5\u89f8\u9999\u8549\u7684\u53ef\u884c\u65b9\u6cd5\uff0c\u53d6\u4ee3\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u6307\u5b9a\u7334\u5b50\u63a5\u89f8\u9999\u8549\u7684\u8def\u5f91\u548c\u65b9\u6cd5\u3002 \u908f\u8f2f\u7de8\u7a0b\u5efa\u7acb\u4e86\u63cf\u8ff0\u4e00\u500b\u554f\u984c\u88cf\u7684\u4e16\u754c\u7684\u908f\u8f2f\u6a21\u578b\u3002\u908f\u8f2f\u7de8\u7a0b\u7684\u76ee\u6a19\u662f\u5c0d\u5b83\u7684\u6a21\u578b\u5efa\u7acb\u65b0\u7684\u9673\u8ff0\u3002\u4e16\u754c\u4e0a\u77e5\u8b58\u4e0d\u65b7\u6f8e\u6f32\u3002\u50b3\u7d71\u4f86\u8aaa\uff0c\u6211\u5011\u6703\u5c07\u4e00\u500b\u554f\u984c\u9673\u8ff0\u6210\u55ae\u4e00\u7684\u5047\u8a2d\u3002\u908f\u8f2f\u7de8\u7a0b\u7684\u7a0b\u5f0f\u900f\u904e\u8b49\u660e\u9019\u500b\u5047\u8a2d\u5728\u6a21\u578b\u88cf\u662f\u5426\u70ba\u771f\u4f86\u89e3\u6c7a\u554f\u984c\u3002 \u4e00\u4e9b\u7d93\u5e38\u7528\u5230\u908f\u8f2f\u7de8\u7a0b\u5de5\u5177\u7684\u7bc4\u7587\uff1a \n*  \u5c08\u5bb6\u7cfb\u7d71\uff0c\u7a0b\u5f0f\u5f9e\u4e00\u500b\u5de8\u5927\u7684\u6a21\u578b\u4e2d\u7522\u751f\u4e00\u500b\u5efa\u8b70\u6216\u7b54\u6848\u3002 \n*  \u81ea\u52d5\u5316\u8b49\u660e\u5b9a\u7406\uff0c\u7a0b\u5f0f\u7522\u751f\u4e00\u4e9b\u65b0\u5b9a\u7406\u4f86\u64f4\u5145\u73fe\u6709\u7684\u7406\u8ad6\u3002 \u6700\u5e38\u7528\u7684\u908f\u8f2f\u7de8\u7a0b\u8a9e\u8a00\u662fProlog\uff0c\u53e6\u5916\u6709\u8f03\u9069\u7528\u65bc\u5927\u578b\u65b9\u6848\u7684Mercury\u3002\u8a73\u76e1\u7684\u6e05\u55ae\u53ef\u898b\u65bcCategory:\u908f\u8f2f\u7de8\u7a0b\u8a9e\u8a00\u3002",
                "lang": "zh"
            },
            {
                "type": "literal",
                "value": "Programowanie logiczne (nazywane tak\u017ce programowaniem w logice lub programowaniem w j\u0119zyku logiki) - metoda programowania, b\u0119d\u0105ca odmian\u0105 programowania deklaratywnego, w kt\u00f3rej program podawany jest jako pewien zestaw zale\u017cno\u015bci, a obliczenia s\u0105 dowodem pewnego twierdzenia w oparciu o te zale\u017cno\u015bci. Na przyk\u0142ad chcemy stwierdzi\u0107, czy w danym grafie skierowanym istnieje \u015bcie\u017cka z pewnego punktu do pewnego innego punktu. Kraw\u0119dzie zapisane s\u0105 relacj\u0105 edge(Sk\u0105d, Dok\u0105d). Nasz program wygl\u0105da\u0142by w Prologu tak: Co czytamy nast\u0119puj\u0105co:",
                "lang": "pl"
            },
            {
                "type": "literal",
                "value": "Logische Programmierung (Pr\u00e4dikative Programmierung) ist ein Programmierparadigma, das auf der mathematischen Logik beruht. Anders als bei der imperativen Programmierung besteht ein Logik-Programm nicht aus einer Folge von Anweisungen, sondern aus einer Menge von Axiomen, welche hier als eine Ansammlung von Fakten oder Annahmen zu verstehen ist. Stellt der Benutzer eines Logik-Programms eine Anfrage, so versucht der Interpreter, die L\u00f6sungsaussage allein aus den Axiomen zu berechnen. Die bekannteste logische Programmiersprache ist Prolog.",
                "lang": "de"
            },
            {
                "type": "literal",
                "value": "In informatica la programmazione logica \u00e8 un paradigma di programmazione che adotta la logica del primo ordine sia per rappresentare sia per elaborare l'informazione. In particolare viene adottato il frammento della logica a clausole di Horn che rappresenta la base teorica su cui sono costruiti i linguaggi di programmazione afferenti al paradigma logico e in particolare il Prolog, o suoi sottolinguaggi, come Datalog o AnsProlog. Il meccanismo principale per elaborare teorie logiche fatte di clausole \u00e8 l'unificazione.",
                "lang": "it"
            }
        ],
        "http://www.w3.org/2002/07/owl#sameAs": [
            {
                "type": "uri",
                "value": "http://fr.dbpedia.org/resource/Programmation_logique"
            },
            {
                "type": "uri",
                "value": "http://pt.dbpedia.org/resource/Programa\u00e7\u00e3o_l\u00f3gica"
            },
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            },
            {
                "type": "uri",
                "value": "http://www.wikidata.org/entity/Q275603"
            },
            {
                "type": "uri",
                "value": "http://it.dbpedia.org/resource/Programmazione_logica"
            },
            {
                "type": "uri",
                "value": "http://nl.dbpedia.org/resource/Logisch_programmeren"
            },
            {
                "type": "uri",
                "value": "http://cs.dbpedia.org/resource/Logick\u00e9_programov\u00e1n\u00ed"
            },
            {
                "type": "uri",
                "value": "http://ja.dbpedia.org/resource/\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"
            },
            {
                "type": "uri",
                "value": "http://d-nb.info/gnd/4195096-3"
            },
            {
                "type": "uri",
                "value": "http://pl.dbpedia.org/resource/Programowanie_logiczne"
            },
            {
                "type": "uri",
                "value": "http://wikidata.dbpedia.org/resource/Q275603"
            },
            {
                "type": "uri",
                "value": "http://ko.dbpedia.org/resource/\ub17c\ub9ac\ud615_\ud504\ub85c\uadf8\ub798\ubc0d"
            },
            {
                "type": "uri",
                "value": "http://rdf.freebase.com/ns/m.04k52"
            },
            {
                "type": "uri",
                "value": "http://de.dbpedia.org/resource/Logische_Programmierung"
            },
            {
                "type": "uri",
                "value": "http://es.dbpedia.org/resource/Programaci\u00f3n_l\u00f3gica"
            }
        ],
        "http://purl.org/dc/terms/subject": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Category:Logic_programming"
            },
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Category:1972_introductions"
            },
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Category:Programming_paradigms"
            }
        ],
        "http://xmlns.com/foaf/0.1/isPrimaryTopicOf": [
            {
                "type": "uri",
                "value": "http://en.wikipedia.org/wiki/Logic_programming"
            }
        ],
        "http://www.w3.org/ns/prov#wasDerivedFrom": [
            {
                "type": "uri",
                "value": "http://en.wikipedia.org/wiki/Logic_programming?oldid=744252214"
            }
        ],
        "http://dbpedia.org/ontology/wikiPageExternalLink": [
            {
                "type": "uri",
                "value": "http://docs.racket-lang.org/racklog/"
            },
            {
                "type": "uri",
                "value": "http://redwood.cs.ttu.edu/~mgelfond/PAPERS/survey.pdf"
            },
            {
                "type": "uri",
                "value": "http://vl.fmnet.info/logic-prog/"
            },
            {
                "type": "uri",
                "value": "http://www.doc.ic.ac.uk/~rak/papers/the%20early%20years.pdf"
            },
            {
                "type": "uri",
                "value": "http://www.ida.liu.se/~ulfni/lpp/"
            },
            {
                "type": "uri",
                "value": "http://www.logicprogramming.org/"
            },
            {
                "type": "uri",
                "value": "http://www.mozart-oz.org/documentation/tutorial/node12.html"
            },
            {
                "type": "uri",
                "value": "http://www.mpprogramming.com/Cpp/"
            },
            {
                "type": "uri",
                "value": "http://www.pdc.dk/"
            },
            {
                "type": "uri",
                "value": "http://aaaipress.org/Papers/Symposia/Spring/2006/SS-06-08/SS06-08-003.pdf"
            },
            {
                "type": "uri",
                "value": "http://www.semafora-systems.com/en/products/ontobroker/"
            },
            {
                "type": "uri",
                "value": "http://dbis.informatik.uni-freiburg.de/index.php?project=Florid"
            },
            {
                "type": "uri",
                "value": "http://liinwww.ira.uka.de/bibliography/LogicProgramming/"
            },
            {
                "type": "uri",
                "value": "http://www.cs.kuleuven.be/~dtai/projects/ALP/TPLP/"
            }
        ],
        "http://dbpedia.org/ontology/abstract": [
            {
                "type": "literal",
                "value": "Logisch programmeren is een vorm van programmeren die valt onder het declaratieve paradigma. Een veelgebruikte logische programmeertaal is Prolog. Ook SQL is een declaratieve taal.Logische talen vinden vooral toepassing in de computationele taalkunde en de kunstmatige intelligentie. Inductief logisch programmeren is een andere vorm van logisch programmeren. In een deductieve logische programmeertaal valt het redeneerproces schematisch weer te geven als feiten + regels = resultaten. De compiler/interpreter is op de hoogte van een aantal feiten, en probeert aan de hand van regels een antwoord te geven op een vraag die aan hem wordt gesteld. Voorbeelden van feiten die voor de interpreter bekend kunnen zijn: \n*  Katten hebben een vacht \n*  Een vacht bestaat uit haren De interpreter moet in dit geval antwoord kunnen geven op de vraag \"Hebben katten haren?\". Een voorbeeld van een functionele en logische programmeertaal is Curry.",
                "lang": "nl"
            },
            {
                "type": "literal",
                "value": "\u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u0645\u0646\u0637\u0642\u064a\u0629 Logic programming \u0647\u064a \u0628\u0645\u0641\u0647\u0648\u0645\u0647\u0627 \u0627\u0644\u0639\u0627\u0645 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u0631\u064a\u0627\u0636\u064a \u0645\u0646 \u0627\u062c\u0644 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062d\u0627\u0633\u0628. \u064a\u0633\u062a\u0639\u0645\u0644 \u0627\u0644\u0645\u0646\u0637\u0642 \u0644\u063a\u0629 \u062a\u0635\u0631\u064a\u062d\u064a\u0629 \u0644\u0644\u062a\u0639\u0628\u064a\u0631 \u0639\u0646 \u0627\u0644\u0645\u0634\u0643\u0644\u0629. \u062e\u0644\u0627\u0641 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0644\u063a\u0627\u062a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062a\u0642\u0644\u064a\u062f\u064a\u0629 \u0641\u0625\u0646 \u0627\u0644\u0645\u0628\u0631\u0645\u062c \u0641\u064a \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u0645\u0646\u0637\u0642\u064a\u0629 \u0644\u0627 \u064a\u0642\u0648\u0645 \u0628\u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0648\u0627\u0646\u0645 \u064a\u0642\u0639 \u0639\u0644\u0649 \u0639\u0627\u062a\u0642\u0647 \u0645\u0633\u0624\u0648\u0644\u064a\u0629 \u062c\u0632\u0626\u064a\u0629 \u0641\u064a \u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0648\u0647\u064a \u0628\u062a\u0645\u062b\u0644 \u0627\u0644\u0642\u0636\u0627\u064a\u0627 \u0648\u0627\u0644\u0645\u0639\u0627\u0631\u0641 \u0628\u0635\u0641\u0629 \u0645\u0646\u0637\u0642\u064a\u0629 logical form. \u0648\u064a\u0642\u0639 \u0627\u0644\u062c\u0632\u0621 \u0627\u0644\u0622\u062e\u0631 \u0644\u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0639\u0644\u0649 \u0645\u0627 \u064a\u062f\u0639\u0649 \u0645\u0628\u0631\u0647\u0646 \u0627\u0644\u0642\u0636\u0627\u064a\u0627 theorem-prover \u0623\u0648 \u0645\u0648\u0644\u062f \u0627\u0644\u0646\u0645\u0627\u0630\u062c model-generator \u0627\u0644\u0630\u064a \u064a\u0642\u0648\u0645 \u0628\u062d\u0644 \u0627\u0644\u0645\u0634\u0643\u0644\u0629 \u0628\u0634\u0643\u0644 \u0641\u0639\u0627\u0644",
                "lang": "ar"
            },
            {
                "type": "literal",
                "value": "In informatica la programmazione logica \u00e8 un paradigma di programmazione che adotta la logica del primo ordine sia per rappresentare sia per elaborare l'informazione. In particolare viene adottato il frammento della logica a clausole di Horn che rappresenta la base teorica su cui sono costruiti i linguaggi di programmazione afferenti al paradigma logico e in particolare il Prolog, o suoi sottolinguaggi, come Datalog o AnsProlog. Il meccanismo principale per elaborare teorie logiche fatte di clausole \u00e8 l'unificazione. Fra le estensioni della programmazione logica sono la Programmazione logica induttiva e la Programmazione logica abduttiva.",
                "lang": "it"
            },
            {
                "type": "literal",
                "value": "Logic programming is a programming paradigm based on formal logic. A program written in a logic programming language is a set of sentences in logical form, expressing facts and rules about some problem domain. Major logic programming language families include Prolog, Answer set programming (ASP) and Datalog. In all of these languages, rules are written in the form of clauses: H :- B1, \u2026, Bn. and are read declaratively as logical implications: H if B1 and \u2026 and Bn. H is called the head of the rule and B1, \u2026, Bn is called the body. Facts are rules that have no body, and are written in the simplified form: H. In the simplest case in which H, B1, \u2026, Bn are all atomic formulae, these clauses are called definite clauses or Horn clauses. However, there exist many extensions of this simple case, the most important one being the case in which conditions in the body of a clause can also be negations of atomic formulae. Logic programming languages that include this extension have the knowledge representation capabilities of a non-monotonic logic. In ASP and Datalog, logic programs have only a declarative reading, and their execution is performed by means of a proof procedure or model generator whose behaviour is not meant to be under the control of the programmer. However, in the Prolog family of languages, logic programs also have a procedural interpretation as goal-reduction procedures: to solve H, solve B1, and ... and solve Bn. Consider, for example, the following clause: fallible(X) :- human(X). based on an example used by Terry Winograd  to illustrate the programming language Planner. As a clause in a logic program, it can be used both as a procedure to test whether X is fallible by testing whether X is human, and as a procedure to find an X that is fallible by finding an X that is human. Even facts have a procedural interpretation. For example, the clause: human(socrates). can be used both as a procedure to show that socrates is human, and as a procedure to find an X that is human by \"assigning\" socrates to X. The declarative reading of logic programs can be used by a programmer to verify their correctness. Moreover, logic-based program transformation techniques can also be used to transform logic programs into logically equivalent programs that are more efficient. In the Prolog family of logic programming languages, the programmer can also use the known problem-solving behaviour of the execution mechanism to improve the efficiency of programs.",
                "lang": "en"
            },
            {
                "type": "literal",
                "value": "La programmation logique est une forme de programmation qui d\u00e9finit les applications \u00e0 l'aide d'un ensemble de faits \u00e9l\u00e9mentaires les concernant et de r\u00e8gles de logique leur associant des cons\u00e9quences plus ou moins directes. Ces faits et ces r\u00e8gles sont exploit\u00e9s par un d\u00e9monstrateur de th\u00e9or\u00e8me ou moteur d'inf\u00e9rence, en r\u00e9action \u00e0 une question ou requ\u00eate. Cette approche se r\u00e9v\u00e8le beaucoup plus souple que la d\u00e9finition d'une succession d'instructions que l'ordinateur ex\u00e9cuterait. La programmation logique est consid\u00e9r\u00e9e comme une programmation d\u00e9clarative plut\u00f4t qu\u2019imp\u00e9rative, car elle s'attache davantage au quoi qu'au comment, le moteur assumant une large part des encha\u00eenements. Elle est particuli\u00e8rement adapt\u00e9e aux besoins de l\u2019intelligence artificielle, dont elle est un des principaux outils.",
                "lang": "fr"
            },
            {
                "type": "literal",
                "value": "Logische Programmierung (Pr\u00e4dikative Programmierung) ist ein Programmierparadigma, das auf der mathematischen Logik beruht. Anders als bei der imperativen Programmierung besteht ein Logik-Programm nicht aus einer Folge von Anweisungen, sondern aus einer Menge von Axiomen, welche hier als eine Ansammlung von Fakten oder Annahmen zu verstehen ist. Stellt der Benutzer eines Logik-Programms eine Anfrage, so versucht der Interpreter, die L\u00f6sungsaussage allein aus den Axiomen zu berechnen. Dazu werden eine Menge von so genannten Regeln und Anweisungen, die der Syntax gem\u00e4\u00df aufgebaut sind zusammen mit der Information, welche L\u00f6sungsmethode vorgesehen ist, in den Programmcode eingef\u00fcgt. Logische Programmiersprachen geh\u00f6ren zu den deklarativen Programmiersprachen und haben ihre Urspr\u00fcnge im Forschungsgebiet K\u00fcnstliche Intelligenz. In einem imperativen Programm wird genau beschrieben, wie und in welcher Reihenfolge ein Problem zu l\u00f6sen ist. Im Gegensatz dazu wird in einem logikbasierten Programm beschrieben, was gilt. Das Wie ist durch die L\u00f6sungsmethode vorgegeben. Die L\u00f6sung wird aus den Regeln hergeleitet. Die bekannteste logische Programmiersprache ist Prolog.",
                "lang": "de"
            },
            {
                "type": "literal",
                "value": "\u908f\u8f2f\u7de8\u7a0b\uff08\u903b\u8f91\u7a0b\u5e8f\u8bbe\u8ba1\uff09\u662f\u7a2e\u7de8\u7a0b\u5178\u7bc4\uff0c\u5b83\u8a2d\u5b9a\u7b54\u6848\u9808\u7b26\u5408\u7684\u898f\u5247\u4f86\u89e3\u6c7a\u554f\u984c\uff0c\u800c\u975e\u8a2d\u5b9a\u6b65\u9a5f\u4f86\u89e3\u6c7a\u554f\u984c\u3002\u904e\u7a0b\u662f \u4e8b\u5be6+\u898f\u5247=\u7d50\u679c\u3002 \u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u770bInductive logic programming\u3002 \u908f\u8f2f\u7de8\u7a0b\u7684\u8981\u9ede\u662f\u5c07\u6b63\u898f\u7684\u908f\u8f2f\u98a8\u683c\u5e36\u5165\u96fb\u8166\u7a0b\u5f0f\u8a2d\u8a08\u4e4b\u4e2d\u3002\u6578\u5b78\u5bb6\u548c\u54f2\u5b78\u5bb6\u767c\u73fe\u908f\u8f2f\u662f\u6709\u6548\u7684\u7406\u8ad6\u5206\u6790\u5de5\u5177\u3002\u5f88\u591a\u554f\u984c\u53ef\u4ee5\u81ea\u7136\u5730\u8868\u793a\u6210\u4e00\u500b\u7406\u8ad6\u3002\u8aaa\u9700\u8981\u89e3\u7b54\u4e00\u500b\u554f\u984c\uff0c\u901a\u5e38\u8207\u89e3\u7b54\u4e00\u500b\u65b0\u7684\u5047\u8a2d\u662f\u5426\u8ddf\u73fe\u5728\u7684\u7406\u8ad6\u7121\u885d\u7a81\u7b49\u50f9\u3002\u908f\u8f2f\u63d0\u4f9b\u4e86\u4e00\u500b\u8b49\u660e\u554f\u984c\u662f\u771f\u9084\u662f\u5047\u7684\u65b9\u6cd5\u3002\u5efa\u7acb\u8b49\u660e\u7684\u65b9\u6cd5\u662f\u4eba\u6240\u7686\u77e5\u7684\uff0c\u6545\u908f\u8f2f\u662f\u89e3\u7b54\u554f\u984c\u7684\u53ef\u9760\u65b9\u6cd5\u3002\u908f\u8f2f\u7de8\u7a0b\u7cfb\u7d71\u5247\u81ea\u52d5\u5316\u4e86\u9019\u500b\u7a0b\u5e8f\u3002\u4eba\u5de5\u667a\u80fd\u5728\u908f\u8f2f\u7de8\u7a0b\u7684\u767c\u5c55\u4e2d\u767c\u63ee\u4e86\u91cd\u8981\u7684\u5f71\u97ff\u3002 \u7334\u5b50\u548c\u9999\u8549\u554f\u984c\u662f\u908f\u8f2f\u7de8\u7a0b\u793e\u7fa4\u7684\u8457\u540d\u554f\u984c\u3002\u96fb\u8166\u9808\u81ea\u884c\u627e\u51fa\u4ee4\u7334\u5b50\u63a5\u89f8\u9999\u8549\u7684\u53ef\u884c\u65b9\u6cd5\uff0c\u53d6\u4ee3\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u6307\u5b9a\u7334\u5b50\u63a5\u89f8\u9999\u8549\u7684\u8def\u5f91\u548c\u65b9\u6cd5\u3002 \u908f\u8f2f\u7de8\u7a0b\u5efa\u7acb\u4e86\u63cf\u8ff0\u4e00\u500b\u554f\u984c\u88cf\u7684\u4e16\u754c\u7684\u908f\u8f2f\u6a21\u578b\u3002\u908f\u8f2f\u7de8\u7a0b\u7684\u76ee\u6a19\u662f\u5c0d\u5b83\u7684\u6a21\u578b\u5efa\u7acb\u65b0\u7684\u9673\u8ff0\u3002\u4e16\u754c\u4e0a\u77e5\u8b58\u4e0d\u65b7\u6f8e\u6f32\u3002\u50b3\u7d71\u4f86\u8aaa\uff0c\u6211\u5011\u6703\u5c07\u4e00\u500b\u554f\u984c\u9673\u8ff0\u6210\u55ae\u4e00\u7684\u5047\u8a2d\u3002\u908f\u8f2f\u7de8\u7a0b\u7684\u7a0b\u5f0f\u900f\u904e\u8b49\u660e\u9019\u500b\u5047\u8a2d\u5728\u6a21\u578b\u88cf\u662f\u5426\u70ba\u771f\u4f86\u89e3\u6c7a\u554f\u984c\u3002 \u4e00\u4e9b\u7d93\u5e38\u7528\u5230\u908f\u8f2f\u7de8\u7a0b\u5de5\u5177\u7684\u7bc4\u7587\uff1a \n*  \u5c08\u5bb6\u7cfb\u7d71\uff0c\u7a0b\u5f0f\u5f9e\u4e00\u500b\u5de8\u5927\u7684\u6a21\u578b\u4e2d\u7522\u751f\u4e00\u500b\u5efa\u8b70\u6216\u7b54\u6848\u3002 \n*  \u81ea\u52d5\u5316\u8b49\u660e\u5b9a\u7406\uff0c\u7a0b\u5f0f\u7522\u751f\u4e00\u4e9b\u65b0\u5b9a\u7406\u4f86\u64f4\u5145\u73fe\u6709\u7684\u7406\u8ad6\u3002 \u6700\u5e38\u7528\u7684\u908f\u8f2f\u7de8\u7a0b\u8a9e\u8a00\u662fProlog\uff0c\u53e6\u5916\u6709\u8f03\u9069\u7528\u65bc\u5927\u578b\u65b9\u6848\u7684Mercury\u3002\u8a73\u76e1\u7684\u6e05\u55ae\u53ef\u898b\u65bcCategory:\u908f\u8f2f\u7de8\u7a0b\u8a9e\u8a00\u3002",
                "lang": "zh"
            },
            {
                "type": "literal",
                "value": "Programa\u00e7\u00e3o l\u00f3gica \u00e9 um paradigma de programa\u00e7\u00e3o que faz uso da l\u00f3gica matem\u00e1tica. John McCarthy [1958] foi o primeiro a publicar uma proposta de uso da l\u00f3gica matem\u00e1tica para programa\u00e7\u00e3o. A primeira linguagem de programa\u00e7\u00e3o l\u00f3gica foi a Planner, a qual permitia a invoca\u00e7\u00e3o orientada a padr\u00f5es de planos procedimentais de asser\u00e7\u00f5es e de objetivos. Com a necessidade de adapta\u00e7\u00e3o aos sistemas de mem\u00f3ria muito limitada, que eram dispon\u00edveis quando ela foi desenvolvida. A linguagem Planner usava estruturas de controle de backtracking, de tal forma que apenas um \u00fanico caminho computacional tinha que ser armazenado por vez. Em seguida, o Prolog foi desenvolvido como uma simplifica\u00e7\u00e3o do Planner que permitia a invoca\u00e7\u00e3o orientada a padr\u00f5es apenas a partir de objetivos (tamb\u00e9m baseado em backtracking). A partir do Planner, foram desenvolvidas as linguagens de programa\u00e7\u00e3o QA-4, Popler, Conniver, e QLISP. As linguagens de programa\u00e7\u00e3o Mercury, Visual Prolog, Oz e Frill, foram desenvolvidas a partir do Prolog. Atualmente existem linguagens de programa\u00e7\u00e3o l\u00f3gica concorrente (n\u00e3o baseadas em backtracking) derivadas do Planner (por exemplo, a Ether) e derivadas do Prolog (ver Shapiro 1989 para um apanhado geral).",
                "lang": "pt"
            },
            {
                "type": "literal",
                "value": "\u041b\u043e\u0433\u0438\u0301\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0301\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2014 \u043f\u0430\u0440\u0430\u0434\u0438\u0433\u043c\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0435 \u0442\u0435\u043e\u0440\u0435\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u0434\u0435\u043b \u0434\u0438\u0441\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438, \u0438\u0437\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0432 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b \u0432\u044b\u0432\u043e\u0434\u0430. \u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u0442\u0435\u043e\u0440\u0438\u0438 \u0438 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 \u0440\u0435\u0437\u043e\u043b\u044e\u0446\u0438\u0439. \u0421\u0430\u043c\u044b\u043c \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f Prolog. \u041f\u0435\u0440\u0432\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044b\u043b \u044f\u0437\u044b\u043a Planner, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b\u0430 \u0437\u0430\u043b\u043e\u0436\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 (\u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0437\u044b\u0432\u0430\u043b\u0430\u0441\u044c \u043f\u043b\u0430\u043d\u043e\u043c). Planner \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u0438\u0437\u0438\u0442\u044c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c (\u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u044d\u043a\u0442\u0440\u0435\u043a\u0438\u043d\u0433\u0430 \u2014 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c) \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u0430 \u0444\u0430\u043a\u0442\u043e\u0432, \u0431\u0435\u0437 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0435\u043a\u0430. \u0417\u0430\u0442\u0435\u043c \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u044f\u0437\u044b\u043a Prolog, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b \u043f\u043b\u0430\u043d\u0430 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0438 \u0431\u044b\u043b, \u0432 \u044d\u0442\u043e\u043c \u0441\u043c\u044b\u0441\u043b\u0435, \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u0435\u043c \u044f\u0437\u044b\u043a\u0430 Planner. \u041e\u0442 \u044f\u0437\u044b\u043a\u0430 Planner \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0438 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u044f\u0437\u044b\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f QA-4, Popler, Conniver \u0438 QLISP. \u042f\u0437\u044b\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f Mercury, Visual Prolog, Oz \u0438 Fril \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0438 \u0443\u0436\u0435 \u043e\u0442 \u044f\u0437\u044b\u043a\u0430 Prolog. \u041d\u0430 \u0431\u0430\u0437\u0435 \u044f\u0437\u044b\u043a\u0430 Planner \u0431\u044b\u043b\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0435 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043c\u0435\u0442\u043e\u0434\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430\u043c\u0438), \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Ether).",
                "lang": "ru"
            },
            {
                "type": "literal",
                "value": "\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08Logic Programming\uff09\u3068\u306f\u3001\u5e83\u3044\u610f\u5473\u3067\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306e\u6570\u7406\u8ad6\u7406\u5b66\u306e\u4f7f\u7528\u3067\u3042\u308b\u3002\u3053\u306e\u89b3\u70b9\u3067\u306e\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u3001\u30b8\u30e7\u30f3\u30fb\u30de\u30c3\u30ab\u30fc\u30b7\u30fc[1958]\u306eadvice taker\u306e\u63d0\u6848\u306b\u307e\u3067\u3055\u304b\u306e\u307c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3088\u308a\u4e00\u822c\u7684\u306b\u53d7\u3051\u5165\u3089\u308c\u3066\u3044\u308b\u72ed\u3044\u610f\u5473\u3067\u306e\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u3001\u8ff0\u8a9e\u8ad6\u7406\u5f0f\u3092\u975e\u6c7a\u5b9a\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u307f\u306a\u3059\u3082\u306e\u3067\u3001\u8ff0\u8a9e\u8ad6\u7406\u5f0f\u306f\u5ba3\u8a00\u7684\u3067\u3042\u308b\u3068\u540c\u6642\u306b\u624b\u7d9a\u304d\u7684\u306b\u3082\u89e3\u91c8\u3055\u308c\u308b\u3002 \u8ad6\u7406\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u3057\u30661971\u5e74\u306b Planner \u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3067\u3042\u308b Micro-Planner \u304c\u958b\u767a\u3055\u308c\u305f\u3002\u8868\u660e\u3068\u30b4\u30fc\u30eb\u304b\u3089\u30d1\u30bf\u30fc\u30f3\u306b\u3088\u308b\u624b\u7d9a\u304d\u7684\u8a08\u753b\u3092\u547c\u3073\u51fa\u3059\u6a5f\u80fd\u3092\u5099\u3048\u3066\u3044\u305f\u304c\u3001\u5341\u5206\u306b\u5f62\u5f0f\u5316\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3002Planner\u3068\u72ec\u7acb\u3057\u3066\u3088\u308a\u8ad6\u7406\u3092\u91cd\u8996\u3057\u305f Prolog \u304c\u958b\u767a\u3055\u308c\u3001\u30b3\u30ef\u30eb\u30b9\u30ad\u30fc\u306b\u3088\u308a\u8ff0\u8a9e\u8ad6\u7406\u5f0f(\u30db\u30fc\u30f3\u7bc0)\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u89e3\u91c8\u306e\u8003\u3048\u65b9\u3068\u7d50\u3073\u4ed8\u304d\u3001\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u304c\u78ba\u7acb\u3057\u305f\u3002Planner \u304b\u3089\u306e\u6d3e\u751f\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Popler\u304c\u958b\u767a\u3055\u308c\u305f\u3002Prolog \u304b\u3089\u306e\u6d3e\u751f\u8a00\u8a9e\u3068\u3057\u3066\u306f\u3001Mercury\u3001Visual Prolog\u3001Oz\u3001Fril \u306a\u3069\u304c\u3042\u308b\u3002\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u306a\u3044\u4e26\u884c\u8ad6\u7406\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u3057\u3066Prolog \u304b\u3089\u306e\u6d3e\u751f\u3057\u305fConcurrent Prolog\u3001PARLOG\u3001GHC\u3001KL1\u306a\u3069\u306e\u5404\u7a2e\u8a00\u8a9e\uff08Shapiro [1989] \u306b\u8abf\u67fb\u7d50\u679c\u304c\u3042\u308b\uff09\u304c\u3042\u308b\u3002",
                "lang": "ja"
            },
            {
                "type": "literal",
                "value": "Programowanie logiczne (nazywane tak\u017ce programowaniem w logice lub programowaniem w j\u0119zyku logiki) - metoda programowania, b\u0119d\u0105ca odmian\u0105 programowania deklaratywnego, w kt\u00f3rej program podawany jest jako pewien zestaw zale\u017cno\u015bci, a obliczenia s\u0105 dowodem pewnego twierdzenia w oparciu o te zale\u017cno\u015bci. Na przyk\u0142ad chcemy stwierdzi\u0107, czy w danym grafie skierowanym istnieje \u015bcie\u017cka z pewnego punktu do pewnego innego punktu. Kraw\u0119dzie zapisane s\u0105 relacj\u0105 edge(Sk\u0105d, Dok\u0105d). Nasz program wygl\u0105da\u0142by w Prologu tak: connected(X, Y) :- X = Y.connected(X, Y) :- edge(X,Y).connected(X, Y) :- edge(X,Z), connected(Z, Y). Co czytamy nast\u0119puj\u0105co: \n*  istnieje \u015bcie\u017cka z X do Y, je\u015bli X = Y \n*  istnieje \u015bcie\u017cka z X do Y, je\u015bli dla jakiego\u015b Z istnieje kraw\u0119d\u017a z X do Z, oraz \u015bcie\u017cka z Z do Y Programowanie logiczne umo\u017cliwia \u0142atwy zapis wielu algorytm\u00f3w, a programy logiczne w przeciwie\u0144stwie do imperatywnych \u0142atwo te\u017c wykonywa\u0107 r\u00f3wnolegle.",
                "lang": "pl"
            },
            {
                "type": "literal",
                "value": "La programaci\u00f3n l\u00f3gica es un tipo de paradigmas de programaci\u00f3n dentro del paradigma de programaci\u00f3n declarativa. El resto de los subparadigmas de programaci\u00f3n dentro de la programaci\u00f3n declarativa son: programaci\u00f3n funcional, programaci\u00f3n con restricciones, programas DSL (de dominio espec\u00edfico) e h\u00edbridos. La programaci\u00f3n funcional se basa en el concepto de funci\u00f3n (que no es m\u00e1s que una evoluci\u00f3n de los predicados), de corte m\u00e1s matem\u00e1tico. La programaci\u00f3n l\u00f3gica gira en torno al concepto de predicado, o relaci\u00f3n entre elementos.",
                "lang": "es"
            }
        ],
        "http://dbpedia.org/ontology/wikiPageRevisionID": [
            {
                "type": "literal",
                "value": 744252214,
                "datatype": "http://www.w3.org/2001/XMLSchema#integer"
            }
        ],
        "http://dbpedia.org/ontology/wikiPageID": [
            {
                "type": "literal",
                "value": 17927,
                "datatype": "http://www.w3.org/2001/XMLSchema#integer"
            }
        ],
        "http://purl.org/linguistics/gold/hypernym": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Paradigm"
            }
        ]
    },
    "http://dbpedia.org/resource/Logic_Programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Logic_programming_language": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Rule-based_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/RuleML": {
        "http://dbpedia.org/property/focus": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Louis_Hodes": {
        "http://dbpedia.org/ontology/knownFor": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Logic_program": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Logical_(programming)": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Logical_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Transaction_logic_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Rule-based_(programming)": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Relational_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Linear_logic_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Rule-Based": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Higher-order_logic_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Higher_order_logic_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Metalogic_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/Object-oriented_logic_programming": {
        "http://dbpedia.org/ontology/wikiPageRedirects": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    },
    "http://dbpedia.org/resource/LP": {
        "http://dbpedia.org/ontology/wikiPageDisambiguates": [
            {
                "type": "uri",
                "value": "http://dbpedia.org/resource/Logic_programming"
            }
        ]
    }
}